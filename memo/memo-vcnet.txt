
- logmask 14 rawaudio.rawをfopenすると死ぬ
- spi2が効かない。断線？
- クライアント側リフレッシュレートが低いとvsync有効時にフレームが溜まる。
- 信号線のプルダウン(done)
- messageの右端がpitchまで伸ばされている
- mbpのcaps lockへのmapが効いていない？
- zybo: yuv, opengl対応に更新
- gl: メッセージ文字列(done9
- gl: バイリニア補間(done)
- yuv: ピクセル偶奇が裏返ることがある(done)
- yuv: tlastが出ていないが大丈夫なのか
- glのときabsmouseが効かないのはなぜ？(done)
  - get_cur_draw_rectが取れないため
- pi pico サスペンドから復帰時にクラッシュすることがある？
- PASS THROUGH MODEを試す
- spiで渡すデータの末尾のdeadbeefだけでなく頭にも入れる必要がある。
  ただし再現させにくい。
- SDLのaudioバッファを小さくすると壊れるので、音声遅延が大きい。
- udp10g: PCからのUDPパケットの末尾に無駄な0が入っている？
- udp10g: dropするときの原因を調べる
- ウインドウ移動中に止まる  SDL_SetModalLoopCallback?
  もうすぐリリースされる？
- macに右altが無い
- capsが一度しか効かないのは何故？
- パスワード

- ubuntu22でvivadoが死ぬ (done)
  - XWaylandを使うと死ぬもよう。2018.2でも直ってないもよう。
  - https://support.xilinx.com/s/article/70442?language=ja
- joystickのremap(done)
- macで右下と右上のキーが効いていない。(done)
- macでIME(done)
- pasteがおかしい?(done)
- vcnet.cppからmcu i2c削除(done)
- artyz7版のspi対応(done)
- pi picoのspiがLSBFIRSTをサポートしないようなのでFPGA側をMSBFIRSTに変更(done)
- gamecontrollerを挿しているとkeyboardを取りこぼす(done)
- udp送信パケットを効率化(done)
- game controller(done)
- absmouseの位置(done)
  windowsなど送信側がclipしている場合(信号モードが画面解像度と一致しないとき)
  はabsmouseの座標計算は合わないが、これは避けようがない。
- mouseの遅延(done)
- udp10g: overlapped i/oでWSARecv(done)
- udp10g: オーディオ(done)
- udp10g: 一行抜けている(done)
- udp10g: 各種解像度(done)
- インタレースを切り替え(done)
- キーマップ設定(done)
  https://github.com/libsdl-org/SDL/issues/1059
- 音声が少し壊れている(done)
- i2sが48khzでないときがある(done)
- ブレッドボード無しでi2s(done)
- キーボード状態をリセットするコマンド(done)
- キーpress/releaseを正確に
  - キーリピート時に無駄に送信しない(done)
- 状態をLEDで(done)
- サーバ側をリセットすると1000fpsくらいで無駄ループが回る(done)
- ipアドレス設定(done)
- 一番下のライン、おかしなデータを送信している(done)
- windows client, ホスト側ディスプレイ60Hz, 60iのとき遅延がひどい
  - ホスト側のvsyncをoffにすると治る
  - TCP受信バッファにたまるのでは
- 2021.2でビルド(done)
- zynqからarduinoへのSPI通信(done)
- 「_」が打てないor化けることがある(done)

------------------------------------------
特殊キー割り当て


RLAT               マウス捕獲解除
button5            マウス捕獲解除
left               マウス捕獲
RALT + Enter       フルスクリーン切り替え
RALT + DEL         Ctrl+Alt+Del
RALT + I           インタレース切替
RALT + S           情報表示切替
button2 + 3 + 4    システムリセット

------------------------------------------
i2c_master.v

input VALID 実行開始。1クロックだけ1にすればよい。
output READY 準備完了フラグ
input DEVADDR[6:0] slaveの7bitアドレス
input REGADDR[7:0] 最初に書き込む1byte
input WDATA[31:0] 続けて書き込むデータ
input WBYTES[2:0] WDATAのバイト数
output RDATA[31:0] 書き込みのあとに読み出したデータ
input RBYTES[2:0] RDATAに読み出すバイト数

WDATAの前にREGADDRの1byteを書き込むので合計5byteまで書き込める
(書き込めていない?)

------------------------------------------
i2c_master.vをaxiから操作

レジスタ:
+0  +0x00:
  (read)
  READY[7:7]   i2cが準備完了したら1を返す
  ERR[2:0]     直前の操作で起きたエラーを返す
  (write)
  ADDR[6:0]    操作対象のi2c slaveの7bitアドレス
               これの書き込みをトリガーとしてi2c読み書きが実行される
+2  +0x08:
  WDATA[31:0]  (write)i2cで書き込むデータ
+4  +0x10:
  WBYTES[2:0]  (write)i2cで書き込むデータのバイト数
+6  +0x18:
  RDATA[31:0]  (read)i2cで読み出したデータ
+8  +0x20:
  RBYTES[2:0]  (write)i2cで読み出すデータのバイト数
+10 +0x28:
  LED[3:0]     (write)状態表示LED 兼 watchdog timerのハートビート
+12 +0x30:
  WATCHDOG     (write)watchdog timer作動時間(だいたい秒)
+14 +0x38:
  I2S_DATA     (read)i2s受信データを1サンプル読みだす
               読み出したデータはFIFOから削除される
+16 +0x40:
  GPIO         (write)HDMIスイッチ制御の赤外線センサ信号に使用

処理の流れ:
1. READYが1になるまで待つ。
2. WDATA, WBYTES, RBYTESに値をセットする。
3. ADDRに値をセットするとi2c読み書きが実行される。
4. READYが1になるまで待つ。
5. RDATAにi2cで読みだした値が入っているのでそれを読む。

------------------------------------------
FPGA IOピン

CK_SCL, CK_SDA
arduino shieldのscl, sda
マイコンへのi2c通信に使用

CK_IO0, CK_IO1
arduino shieldのioピン
旧i2c通信に使用していた(現在使用していない)

LED0, LED1, LED2, LED3
ボード上の緑LED
状態表示LEDとして使用

CK_IO2, CK_IO3, CK_IO4
arduino shieldのioピン
i2sのLR, DAT, BCLKとして使用

CK_IO13
HDMIスイッチ制御の赤外線センサ信号に使用


------------------------------------------

i2c読み出しコールバックで読み込むようにするとPCをsuspend/resumeすると
応答しなくなる。RSTを使うと復帰する。
割り込みコールバックを使わないとpicoで動かない。


------------------------------------------
謎モジュール

SCK 100MHzの1/8くらい 12.5MHz?
BCK SCKの1/4くらい 3.125MHz?

DATの最初のbitはLCKが変化した次のクロックサイクルなのか？ -> YES


------------------------------------------
HDMI信号

FullHD 1920*1080*60*24 = 2985984000 bits/sec (3G bps)
100MHzで32bit/cycleでおよそ3Gbps


------------------------------------------
pi picoでusb-i2s

I2S_DATA_PIN 28
I2S_CLOCK_PIN_BASE 26
26, 27, 28を使う?

26: BCLK
27: LR
28: DATA

片側あたり16bit


------------------------------------------
#1
9072:4416:633:497:628:497:627:497:627:498:627:497:628:496:628:497:628:1593:634:1594:627:1594:627:1595:628:1593:634:1593:628:1594:627:1595:633:491:628:1599:628:496:628:1595:627:497:627:497:628:497:628:496:628:496:628:496:629:1594:627:497:627:1595:628:1593:634:1593:628:1594:627:1595:627:39498:9023:2167:633
#2
9078:4388:656:469:655:469:655:469:656:470:654:470:654:470:655:464:661:1566:655:1566:656:1567:654:1567:660:1562:661:1565:656:1566:655:1567:655:470:654:1567:656:1565:661:1561:661:464:660:465:659:465:660:464:661:463:661:464:655:469:661:463:661:1562:660:1561:661:1566:656:1538:683:1567:654:39460:9051:2139:661
#3
9100:4383:661:463:661:464:666:458:666:458:661:459:666:459:665:459:665:1562:661:1560:661:1561:666:1556:665:1557:666:1555:666:1561:666:1556:665:460:665:459:666:458:667:458:666:1555:666:458:666:460:665:459:665:459:665:1557:666:1555:666:1555:667:459:665:1556:665:1556:667:1560:667:1555:666:39449:9056:2134:665
#4
9034:4410:634:486:638:486:638:487:637:487:639:485:639:486:639:485:639:1588:633:1589:633:1589:633:1588:634:1587:639:1584:638:1583:638:1589:634:490:634:1560:661:492:633:491:633:1589:633:491:634:490:634:491:633:491:634:490:634:1589:638:1561:661:486:639:1582:639:1583:638:1589:633:1589:633:39481:9023:2167:628
#5
9061:4406:638:492:638:488:637:488:640:485:641:485:640:485:640:486:640:1585:638:1586:635:1588:635:1589:635:1585:638:1591:633:1591:635:1588:635:491:635:1585:638:1591:638:488:634:1589:640:1584:640:493:632:493:638:487:638:488:635:490:635:1589:640:485:640:486:640:1585:638:1586:640:1584:640:39474:9044:2163:635

------------------------------------------
#          NUL SOH STX ETX EOT ENQ ACK BEL BS  HT  LF  VT  FF  CR  SO  SI
ch2usb@00: 000,000,000,000,000,000,000,000,000,02b,000,000,000,000,000,000
#          DLE DC1 DC2 DC3 DC4 NAK SYN ETB CAN EM  SUB ESC FS  GS  RS  US
ch2usb@10: 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
#          SP  !   "   #   $   %   &   '   (   )   *   +   ,   -   .   /
ch2usb@20: 02c,21e,21f,220,221,222,223,224,225,226,234,233,036,02d,037,038
#          0   1   2   3   4   5   6   7   8   9   ,   ;   <   =   >   ?
ch2usb@30: 027,01e,01f,020,021,022,023,024,025,026,034,033,236,22d,237,238
#          @   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O
ch2usb@40: 02f,204,205,206,207,208,209,20a,20b,20c,20d,20e,20f,210,211,212
#          P   Q   R   S   T   U   V   W   X   Y   Z   [   \   ]   ^   _
ch2usb@50: 213,214,215,216,217,218,219,21a,21b,21c,21d,030,089,032,02e,287
#          `   a   b   c   d   e   f   g   h   i   j   k   l   m   n   o
ch2usb@60: 22f,004,005,006,007,008,009,00a,00b,00c,00d,00e,00f,010,011,012
#          p   q   r   s   t   u   v   w   x   y   z   {   |   }   ~   DEL
ch2usb@70: 013,014,015,016,017,018,019,01a,01b,01c,01d,230,289,232,22e,000

------------------------------------------
mellanox connectx-2の設定

Jumbo Packet を 9000 に

既定値
Interrupt Moderation (Enabled)
Rx Interrupt Moderation Profile (Moderate)
Rx Interrupt Moderation Type (Adaptive)
Receive Completion Method (Adaptive)
Number of Polls on Receive (10000)
Flow Control (Rx & Tx Enabled)
Receive Side Scaling (Enabled)
Receive Base Processor Number (0)
Receive load balancing Profile (closestProcessor)
Maximum Number of RSS Queues (8)
Virtual Machine Queues (Enabled)

------------------------------------------
udp -> axis -> i2c

送信UDPパケット
+0 len[7:0]
+1 type[7:0] 値が1のときマイコンへのi2c、5のときサーバ内i2c
+2 i2cの7bitデバイスアドレス
+3 i2cデータ0byte目(レジスタ番号)
+4 i2cデータ1byte目(書き込む値)

8byte未満なので1wordのaxisに変換


------------------------------------------

txoffset==5 +2以降がpayloadの可能性
rxlen_copyが8未満のときはこのワードが終端
txd <= { rxd_copy[63:16], 16^h0 };
txlen <= rxlen_copy;
rxlen_copyが2より大きいときはpayloadを持つ
udp_len_prev <= (rxlen_copy > 2) ? (rxlen_copy - 2) : 0;
  // これは0以上6以下
udp_d_prev <= (rxlen_copy > 2) ? rxd_copy[63:16] : 0;
  // 上位48bitをudp_d_prevに記録

txoffset==6 すべてがpayloadの可能性
udp_len <= (rxlen
udp_d <= { rxd_copy[15:0], udp_d_prev[47:0] };
  // 前のサイクルの48bitと今のサイクルの16bit


------------------------------------------
PMODへi2cを出すときのピンアサイン

Zybo
PMODのピン番号
   06 05 04 03 02 01
   12 11 10 09 08 07

set_property PACKAGE_PIN J15 [get_ports I2C_SCL_0]     # PMOD JE Pin 3
set_property PACKAGE_PIN H15 [get_ports I2C_SDA_0]     # PMOD JE Pin 4
set_property IOSTANDARD LVCMOS33 [get_ports I2C_SCL_0]
set_property IOSTANDARD LVCMOS33 [get_ports I2C_SDA_0]

AESKU040のPMODコネクタ
端から順に、PMOD3, PMOD4, PMOD1, PMOD2 の順。
PMOD3に差す。Bank 46 VCCO=1.8V
PMOD3_0 F18
PMOD3_1 F19
PMOD3_2 G17  これをI2C_SCLに
PMOD3_3 F17  これをI2C_SDAに

// 0: stat送信要求
// 1: マイコンへのi2cコマンド(USBマウス等)
// 2: サーバのリセット要求
// 3: irコマンド
// 4: サーバフラグの書き換え
// 5: サーバ内i2cコマンド(adv7611等)

UDPパケット 6byteの大きさ
+0 payloadの長さ(4), +1 reqtype(マイコンへのiicは0x01),
+2 iicの7bitアドレス
+3 usb操作の種類(moveなら1, buttonなら2, wheelなら3, keyboard ??
+4 データ0
+5 データ1

0x04, 0x01, (iicアドレス), devaddr, data0, data1


------------------------------------------
interlacedのeven/oddフレームの区別

VSがassertされると同時にHSもassertされるのがevenまたはprogressive、
VSがassertされるのがHSがassertされるのとずれているのがodd?
ADV7611-UG-180.pdfのpp.132

------------------------------------------

https://akizukidenshi.com/catalog/g/gP-12171/
・長辺外形：47.0mm
・短辺外形：36.0mm
・取付穴径：3.2mm
・取付穴間隔長辺：41.0mm
・取付穴間隔短辺：30.0mm

長辺 0.5mm * 8 外形 10穴
短辺 0.5mm * 6 外形 8穴


------------------------------------------
hdmi switch #2

####INPUT1
9027,4545,519,615,521,639,521,614,520,614,523,590,540,593,543,594,538,1725,518,1724,493,1748,519,1701,542,1720,520,1698,540,1726,493,1748,516,618,515,1728,490,644,513,1730,513,621,515,619,515,618,516,620,514,620,490,645,512,1729,514,622,514,1727,515,1727,513,1727,516,1725,538,1705,513
v=1
cnt=67
9003,4569,518,616,517,591,572,588,519,617,517,616,521,593,539,619,514,1727,515,1725,518,1725,515,1726,515,1728,513,1727,516,1727,512,1728,514,621,489,1752,515,621,488,1752,490,646,511,621,512,622,514,623,514,618,512,623,516,1729,513,621,513,1727,513,1727,516,1728,510,1731,489,1751,513
v=1
cnt=67
8999,4567,521,614,521,612,519,590,547,614,520,614,519,616,521,596,564,1670,544,1697,546,1721,519,1721,519,1698,546,1719,518,1701,567,1673,543,592,568,1695,516,617,520,1721,522,591,540,616,520,600,534,615,519,617,514,619,492,1725,543,617,490,1748,519,1724,518,1724,524,1716,516,1725,517
v=1
cnt=67
9243,4335,654,510,552,554,581,554,582,556,578,583,552,583,675,460,657,1585,653,1589,530,1714,625,1618,528,1714,577,1666,527,1717,526,1717,529,606,583,1659,560,575,555,1662,557,606,555,580,554,580,553,583,579,557,526,609,551,1663,580,557,553,1689,553,1689,554,1690,551,1692,551,1692,576,39877,9037,2273,572
v=1
cnt=71
9121,4462,583,554,580,555,582,583,703,431,730,380,607,529,558,578,580,1662,559,1712,603,1641,530,1713,631,1613,528,1714,608,1636,561,1683,533,603,555,1689,560,575,586,1658,584,552,586,549,586,550,584,553,586,548,583,553,557,1658,609,555,554,1663,582,1661,582,1660,581,1663,581,1664,603,39854,9069,2244,579
v=1
cnt=71
9052,4532,560,604,555,580,581,555,560,577,558,576,562,574,589,547,563,1681,584,1660,562,1681,563,1681,566,1678,564,1680,587,1630,615,1628,616,546,587,1630,617,547,587,1629,615,548,588,548,556,581,559,577,554,558,579,554,582,1660,583,554,581,1660,607,1637,580,1662,582,1663,581,1663,580,39876,9065,2246,579
v=1
cnt=71


####INPUT2
8944,4595,489,674,460,646,490,700,435,674,484,623,487,673,461,646,512,1730,489,1751,489,1752,488,1753,531,1712,538,1704,540,1703,488,1776,440,694,463,1807,434,1752,515,1729,461,724,437,648,488,670,464,696,439,645,516,643,463,672,488,644,465,1779,435,1777,489,1749,518,1725,512,1730,514
v=1
cnt=67
8989,4550,543,591,516,616,510,653,460,646,490,643,490,674,461,645,489,1751,496,1728,560,1701,518,1725,496,1771,462,1750,514,1782,434,1752,516,597,536,1728,491,1776,438,1829,435,698,459,651,462,673,460,658,477,670,490,621,490,647,488,643,539,1701,516,1724,538,1704,540,1701,519,1728,509
v=1
cnt=67
8992,4602,464,669,467,651,507,618,516,618,490,673,437,724,435,649,512,1727,515,1728,514,1778,432,1780,486,1755,468,1723,514,1755,508,1728,490,727,461,1701,489,1750,489,1753,487,675,490,593,514,646,514,616,490,649,514,616,518,619,538,595,514,1754,489,1725,489,1754,463,1776,535,1705,541
v=1
cnt=67
9180,4388,581,557,781,350,812,322,583,554,579,556,730,407,579,553,661,1610,553,1664,578,1663,578,1663,580,1665,674,1568,577,1688,679,1563,651,484,554,1687,729,1513,554,1689,631,504,551,583,579,556,529,606,595,539,602,534,578,556,526,609,576,1665,527,1715,581,1661,554,1688,557,1686,555,39856,9061,2240,581
v=1
cnt=71
9094,4476,588,549,587,546,610,524,585,552,582,551,609,525,612,524,585,1656,585,1658,583,1658,582,1659,581,1661,579,1663,578,1665,579,1663,579,556,578,1662,579,1665,578,1670,570,557,577,559,550,584,551,583,577,559,575,559,551,584,551,584,573,1668,552,1692,547,1693,549,1693,549,1696,570,39867,9025,2277,544
v=1
cnt=71
9062,4506,581,554,557,580,579,552,609,526,581,555,557,579,580,551,585,1658,607,1636,579,1662,555,1687,581,1659,579,1664,556,1685,578,1664,580,555,581,1662,580,1660,578,1666,579,554,555,581,553,581,579,555,578,555,553,583,553,582,577,557,553,1690,551,1690,551,1690,553,1691,550,1690,551,39885,9027,2274,548
v=1
cnt=71

####INPUT3
9060,4506,581,503,630,496,638,547,587,557,579,555,579,163,1167,361,580,1687,814,1427,666,1575,629,1612,528,1714,553,1688,593,1647,626,1615,555,579,528,608,524,610,577,557,554,1688,528,606,529,605,552,582,579,556,581,1633,580,1661,580,1660,555,581,576,1664,553,1688,577,1664,577,1665,575
v=1
cnt=67
9269,4299,582,554,582,552,684,453,705,456,628,481,684,450,579,558,577,1690,579,1661,553,1689,680,1562,553,1688,575,1666,648,1594,555,1686,550,585,624,511,628,506,627,508,628,1614,600,534,579,556,529,606,527,607,537,1704,579,1663,550,1692,582,552,582,1660,529,1712,583,1658,559,1684,558
v=1
cnt=67
9060,4501,657,508,605,529,629,477,679,456,581,554,581,585,550,579,529,1711,529,1711,604,1638,559,1682,552,1689,530,1710,560,1681,586,1658,581,551,583,552,557,578,583,549,585,1657,583,551,583,551,583,551,585,548,586,1627,585,1658,580,1660,607,555,555,1660,579,1661,576,1665,580,1662,604
v=1
cnt=67
9064,4506,583,554,580,555,581,556,802,330,778,357,829,308,816,317,804,1440,652,1591,756,1488,655,1586,701,1543,577,1688,554,1689,554,1688,650,485,554,581,702,433,657,478,633,1609,658,477,603,538,618,511,554,581,554,1688,600,1641,575,1668,529,606,547,1694,530,1713,529,1714,576,1665,597,39813,9037,2268,557
v=1
cnt=71
9211,4365,580,582,554,581,650,485,630,505,530,606,626,508,605,531,529,1712,574,1669,527,1715,554,1689,528,1714,556,1686,530,1713,580,1635,581,581,529,606,552,583,553,582,552,1662,602,561,552,559,574,560,577,558,576,1665,576,1665,577,1666,550,585,575,1667,576,1667,550,1692,561,1681,574,39873,9030,2274,546
v=1
cnt=71
9069,160,187,4163,579,555,582,551,583,554,582,553,581,555,579,555,581,555,576,112,162,1393,579,1689,553,1689,553,1689,553,1689,553,1689,752,1490,675,1567,554,581,652,482,554,581,697,438,655,1585,575,560,553,583,654,480,530,605,530,1711,625,1618,630,1611,595,541,600,1641,528,1714,577,1665,552,1689,556
v=1
cnt=71



####INPUT4
9080,4479,557,587,572,581,580,526,557,579,553,615,518,609,527,607,577,1662,556,1685,578,1662,579,1662,577,1662,531,1710,554,1686,555,1686,581,553,533,1707,558,577,559,575,561,1679,560,575,559,574,559,575,587,547,587,547,584,1633,607,1630,609,552,581,1632,609,1631,581,1659,579,1662,578
v=1
cnt=67
9053,4507,580,493,638,391,745,555,579,433,701,526,607,556,580,525,607,1665,587,1656,575,1662,579,1664,576,1689,553,1664,577,1688,550,1689,553,555,834,1432,828,274,809,334,826,1438,666,469,768,367,552,582,552,581,737,398,730,1510,675,1565,723,411,672,1568,649,1593,673,1567,528,1713,606
v=1
cnt=67
9049,4509,578,554,579,557,881,216,871,266,838,356,751,383,699,434,730,1510,528,1713,552,1688,601,1640,575,1665,601,1639,552,1688,526,1715,577,558,526,1715,552,581,551,583,555,1660,580,579,554,580,551,583,576,532,552,581,552,1689,551,1689,577,557,575,1665,574,1666,551,1691,572,1669,572
v=1
cnt=67
9037,4561,527,586,572,564,549,585,551,584,550,586,549,585,551,585,549,1535,706,1606,636,1498,744,1485,757,1689,575,1632,610,1397,822,1307,936,584,551,1126,258,330,550,561,551,585,575,527,639,523,528,392,765,249,4295,262,109,1322,753,1485,528,607,570,1650,548,1715,527,1692,573,1669,548,39875,9035,2273,571
v=1
cnt=71
9061,557,201,3750,580,555,578,554,582,554,580,522,612,553,581,554,582,488,646,1662,580,1662,580,1664,577,1663,577,1664,578,1663,580,1688,551,1665,578,313,820,297,106,1286,554,205,929,152,1248,1422,811,324,554,582,699,435,554,580,621,515,650,1590,571,1670,597,541,573,1666,526,1715,552,1664,554,1686,582
v=1
cnt=71
8994,4576,542,595,463,696,459,648,593,543,516,621,538,594,464,699,459,1758,484,1752,520,1749,461,1752,514,1730,490,1750,518,1779,458,1730,490,696,411,1803,461,675,462,618,569,1753,461,620,512,622,543,592,518,621,486,699,434,1755,516,1750,462,645,515,1780,460,1728,541,1699,530,1712,541,39938,8916,2410,460
v=1
cnt=71


####INPUT5
9018,4545,543,590,544,614,520,614,520,593,543,614,516,617,517,593,546,1720,518,1701,543,1720,518,1700,544,1719,544,1699,492,1728,541,1720,519,593,544,1697,541,1725,515,619,514,1727,492,1749,492,643,491,643,516,595,540,617,518,619,513,1704,540,617,516,620,513,1728,515,1702,539,1727,513
v=1
cnt=67
9040,4542,519,588,546,589,546,591,568,569,548,606,520,593,540,591,540,1726,519,1698,543,1720,520,1701,541,1697,543,1697,546,1718,520,1698,544,614,519,1722,495,1747,516,616,517,1702,567,1673,541,593,543,615,518,615,518,616,519,593,543,1721,517,617,492,641,519,1722,518,1724,514,1728,514
v=1
cnt=67
9018,4546,544,588,543,593,542,593,542,615,518,618,514,619,514,620,517,1724,515,1726,516,1726,489,1751,516,1728,510,1728,516,1733,509,1727,513,622,513,1729,511,1729,489,644,515,1728,512,1729,514,622,513,621,488,644,517,621,487,645,514,1728,515,620,550,585,514,1727,514,1727,515,1725,514
v=1
cnt=67

------------------------------------------
game controller

0x20, 0x21
  buttonCount 32 (2回に分ける)
        void setButton(uint8_t button, uint8_t value);

0x22
  hat 2 (0以上8以下の値、押していないとき8)
        void setHatSwitch(int8_t hatSwitch, int16_t value);

0x24, 0x25, 0x26, 0x27, 0x28, 0x29
AXIS 6 x y z rx ry rz (-32767以上32767以下)
        void setXAxis(int16_t value);
        void setRxAxis(int16_t value);

0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f(予約)
Rudder, Throttle, Accelerator, Brake, Steering (-32768以上32767以下)
        void setRudder(int16_t value);
        void setThrottle(int16_t value);
        void setAccelerator(int16_t value);
        void setBrake(int16_t value);
        void setSteering(int16_t value);

0x20でsend report

SDL_INIT_JOYSTICK

void SDL_JoystickUpdate(void);

int SDL_JoystickNumAxes(SDL_Joystick *joystick);
int SDL_JoystickNumHats(SDL_Joystick *joystick);
int SDL_JoystickNumButtons(SDL_Joystick *joystick);

Sint16 SDL_JoystickGetAxis(SDL_Joystick *joystick, int axis);
Uint8 SDL_JoystickGetHat(SDL_Joystick *joystick, int hat);
Uint8 SDL_JoystickGetButton(SDL_Joystick *joystick, int button);

------------------------------------------
MCU: pi picoでSPI通信, TinyUSB

10MHzのSPI, 32バイト転送に100MHzが5500サイクル。
TinyUSB keyboard、レポートに3ms以上間隔を開けないとホストが取りこぼす。

pro micro 8MHz
2MHzのSPI 32バイト転送に100MHzが18288サイクル
4MHzのSPI 32バイト転送に100MHzが11951サイクル

------------------------------------------
SPI送信データ

+0  (1) mcu id (最上位bitは使用しない)
+1  (1) mouse seq (mouse moveの値が更新されたときincrement)
+2  (1) mouse delta x
+3  (1) mouse delta y
+4  (1) mouse wheel x
+5  (1) mouse wheel y
+6  (2) absmouse x
+8  (2) absmouse y
+10 (1) mouse/absmouse button
+11 (1) keymod
+12 (6) keycode
+18 (1) gc button
+19 (1) gc button 4bit, hat 4bit
+20 (12) analog axes
+32 (-) magic number

ボタン4byte
アナログ11軸22byte
hat2個1byte
計27byte
ボタン11個2byte, 6軸12byte, hat1byte
15
アナログ12bitにすると6軸9byte, 12byte

------------------------------------------

https://ez.analog.com/video/f/q-a/10895/component-mode-and-graphics-mode-in-adv7611

Component mode normally refers to YCbCr (or YUV) color space with syncs on the green channel while Graphics mode normally refers to RGB color space with separate syncs.  For HDMI the mode is determined by the input color space defined in the AVI Infoframe of the incoming video stream with the syncs already embedded in the stream.

For the ADV7611 both stream  are processed by the Component Processor since the only real difference is the color space.

You can control saturation, brightness, hue and contrast easier in YUV color space.

既定値:
98 00 08  2'b0, VID_STD[5:0]
98 01 06  1'b0, V_FREQ[2:0], PRIM_MODE[3:0]
98 02 F0  INP_COLOR_SPACE[3:0] ALT_GAMMA, OP_656_RANGE, RGB_OUT, ALT_DATA_SAT
98 03 00  OP_FORMAT_SEL[7:0]
98 04 62  OP_CH_SEL[2:0], 2'b0, XTAL_FREQ_SEL[1:0], 2'b0
98 05 2C  3'b0, F_OUT_SEL, DATA_BLANK_EN AVCODE_INSERT_EN, REPL_AV_CODE, OP_SWAP_CB_CR
98 06 A0  VS_OUT_SEL, 3'b0, INV_F_POL, IN_VS_POL, IN_HS_POL, INV_LLC_POL

1080p_qs3.txt:
98 01 06 (HDMI Graphics)
98 02 F2 RGB_OUT これを立てるとCSC出力がRGBになる？
VID_STD(=8)とPRIM_MODE(=6)は既定のまま
  HDMI Graphics(RGB?) 640x480@60

PRIM_MODEを06, VID_STDを''h19にすると1920x1200@60
  98 00 19 98 01 06
PRIM_MODEを06, VID_STDを''h18にすると1680x1050@60
  98 00 18 98 01 06
PRIM_MODEを06, VID_STDを''h05にすると1280x1024@60
  98 00 05 98 01 06
PRIM_MODEを06, VID_STDを''h0cにすると1024x768@60
  98 00 0c 98 01 06
PRIM_MODEを06, VID_STDを''h01にすると800x600@60
  98 00 01 98 01 06
PRIM_MODEを06, VID_STDを''h08にすると640x480@60
  98 00 08 98 01 06

PRIM_MODEを05, VID_STDを'h14, 'h16, 'h1e, 'h1fのどれかにすると1080p?
  98 00 14 98 01 05

------------------------------------------
artyz7版ピンアサイン

右側の下から
CK_IO0と1が旧I2CのSCL, SDAなので変更してok
CK_IO2, 3, 4がI2SのLR, DAT, BCLK
CK_IO13がIR_OUT
GND, AREF
SDA, SCLがI2CのSDA, SCLに使用
CK_IOの0, 1, 5, 6, 7, 8, 9, 10, 11, 12が利用可能
A0からA5も利用可能

------------------------------------------
全角/半角

javascript
(半角から全角) 243 up, 229 down
(全角から半角) 244 up, 229 down
windows

------------------------------------------
IR38060 PMBus

device address:
  0.95v: 0x42 
  1.0v: 0x43
  1.2v: 0x44
  1.2v GTH: 0x45
  1.8v GTH: 0x46
  1.8v: 0x47


0x01 OPERATION 既定値 0x80
  0x00を書き込むと Immediate Off
  0x40を書き込むと Soft Off
  0x80を書き込むと On

https://docs.xilinx.com/v/u/ja-JP/ds892-kintex-ultrascale-data-sheet

電源投入/切断シーケンス

VCCINT: 内部電源 0.95v
VCCINT_IO IOバンクの内部電源 0.95v?
VCCBRAM: ブロックRAM 0.95v
VCCO: HRとHP I/O 電圧? 1.14-3.40, 0.95-1.89 1.8v?
VCCAUX: 補助電源? 1.8v?
VCCAUX_IO: 補助I/O 1.8v
VMGTAVCC: トランシーバのアナログ電源 1.0v?
VMGTAVTT: トランスミッタとレシーバのアナログ電源 1.2v?
VMGTVCCAUX トランシーバのアナログクワッドQPLL電源電圧 1.8v?
VMGTAVTTRCAL トランシーバからむの抵抗キャリブレーション回路 1.2v?

推奨: VCCINT/VCCINT_IO, VCCBRAM, VCCAUX/VCCAUX_IO, VCCOの順
(電流が最小になるように、またIOがトライステートになるために)
-> 0.95v, 1.8vの順

VCCADCとVREFは随時立ち上げ可。

推奨: VCCINT, VMGTAVCC, VMGTAVTTの順、またはVMGTAVCC, VCCINT, VMGTAVTTの順
(トランシーバの電流が最小になるように)
-> 0.95v, 1.0v, 1.2vの順、または1.0v, 0.95v, 1.2vの順

device address若い順でよさそう。
0x42から0x47まで。


------------------------------------------
冷却ファン

vcnet_10g走らせ、PMOD抜いた状態。
冷却ファンなし: 50.8
冷却ファンあり: 39.5

箱open 全台sleep: 43.4

------------------------------------------
joystick

スーファミ
ボタン: B(下),Y(左),SEL,STA,A(右),X(上),L,R

XINPUT
ボタン: A(下),B(右),X(左),Y(上),L,R,SEL,STA,LS,RS

すべてのコントロール値を16bit値へ変換する。
ボタン12, hat4, axis12,axisu6
axisは各軸の正負それぞれを1個の値に
axisuは各軸を

------------------------------------------


LCD
138.50MHz
1920 1080
160 31
48 3
32 5
510 287
0 0

------------------------------------------

nvidia設定でRGB Fullにできる
ディスプレイ -> 

------------------------------------------
yuv422

2pixel 4byte U0, Y0, V0, Y1 の順

c = Y'- 16
d = U - 128
e = V - 128
R = (298*c + 409*e + 128) >> 8
G = (298*c - 100*d - 208*e + 128) >> 8
B = (298*c + 516d + 128) >> 8

------------------------------------------

|Y'|   |  66 129  25 ||R|
|Cb| = | -38 -74 112 ||G|
|Cr|   | 112 -94 -18 ||B|

Y't = (Y' + 128) >> 8
Cbt = (Cb + 128) >> 8
Crt = (Cr + 128) >> 8

Y'u = Y't + 16
Cbu = Cbi + 128
Cru = Crt + 128
これを[0..255]にclamp

------------------------------------------
(0,1)の座標がv_coordに入っている
v_coord * v_view_sizeが(0,1920)(0,1080)の座標
floorで整数部分をとれる


------------------------------------------
bilinear

vec2 video_size;
vec2 video_pos = coord * video_size; // ビデオテクスチャのピクセル単位の座標
floor(video_pos-0.5)とfloor(video_pos+0.5)の4点のテクスチャを引く
テクスチャを引く:
  texture2D(texture, (p + 0.5) * video_size_inv);
vec2 a = (video_pos-0.5) - floor(video_pos-0.5);
c00, c01, c10, c11とすると、以下でbilinear補間。
c0 = mix(c01, c00, a.x);
c1 = mix(c11, c10, a.x);
c = mix(c1, c0, a.y);

